Index: app/src/main/java/comp3350/termsetter/Logic/AccountValidation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package comp3350.termsetter.Logic;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport comp3350.termsetter.Persistence.DomainSpecific.Student;\n\npublic class AccountValidation{\n\n    final int MIN_NAME_LENGTH = 1;\n    final int MAX_NAME_LENGTH = 20;\n    final int MIN_PASS_LENGTH = 6;\n    final int MAX_PASS_LENGTH = 10;\n    final int MIN_PHONE_LENGTH = 10;\n    final int MAX_PHONE_LENGTH = 12;\n    Pattern p;\n    Matcher m;\n\n    public AccountValidation(){ }\n\n    public boolean validAccount(String name, String id, String password, String email, String phone){\n        return validName(name) && validID(id) && validPassword(password) && validEmail(email) && validPhone(phone);\n    }\n\n    public boolean validName(String name){\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+\\\\s{1}[a-zA-z]+$\");\n        Matcher m = p.matcher(name);\n        return m.matches() && name.length() >= MIN_NAME_LENGTH && name.length() <= MAX_NAME_LENGTH;\n    }\n\n    public boolean validID(String id){\n        return id.length() >= MIN_NAME_LENGTH && id.length() <= MAX_NAME_LENGTH;\n    }\n\n    public boolean validPassword(String password){\n        boolean validLength = password.length() >= MIN_PASS_LENGTH && password.length() <= MAX_PASS_LENGTH;\n        boolean hasLetter = false;\n        boolean hasNumber = false;\n        for(int i = 0; i < password.length(); i++){\n            char ch = password.charAt(i);\n            if(Character.isLetter(ch)){\n                hasLetter = true;\n            }\n            else if(Character.isDigit(ch)){\n                hasNumber = true;\n            }\n        }\n        return validLength && hasLetter && hasNumber;\n//        System.out.println(password.length());\n//        return password.length() <= 10;\n    }\n\n    public boolean validEmail(String email){\n//        boolean validLength = false;\n//        boolean validDomain = false;\n//        if(email.contains(\"@\")){\n//            String[] tokens = email.split(\"@\");\n//            validLength = tokens[0].length() >= MIN_NAME_LENGTH && tokens[0].length() <= MAX_NAME_LENGTH;\n//            validDomain = tokens[1].contains(\"myumanitoba.ca\");\n//        }\n//        return validLength && validDomain;\n        Pattern p = Pattern.compile(\"^[a-zA-Z]+[0-9]*@myumanitoba\\\\.ca$\");\n        Matcher m = p.matcher(email);\n        if(!m.matches() || email.isEmpty() || !(email.contains(\"@myumanitoba.ca\")) || !(email.length() > \"@myumanitoba.ca\".length())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public boolean validPhone(String phone){\n        String digits = \"\";\n        boolean hasInvalidChar = false;\n        boolean hasOpenBracket = false;\n        for(int i = 0; i < phone.length(); i++){\n            char ch = phone.charAt(i);\n            if(Character.isDigit(ch)){\n                digits += ch;\n            }\n            else{\n                if(ch != '+' && ch != ' ' && ch != '-' && ch != '(' && ch != ')'){\n                    hasInvalidChar = true;\n                }\n                else{\n                    if(ch == '+' && i > 0){\n                        hasInvalidChar = true;\n                    }\n                    else if(ch == '(' && !hasOpenBracket){\n                        hasOpenBracket = true;\n                    }\n                    else if(ch == ')' && hasOpenBracket){\n                        hasOpenBracket = false;\n                    }\n                }\n            }\n    }\n        boolean validLength = digits.length() >= MIN_PHONE_LENGTH && digits.length() <= MAX_PHONE_LENGTH;\n        return validLength && !hasInvalidChar && !hasOpenBracket;\n//        return phone.length() <= 10;\n    }\n\n    public boolean confirmPassword(String newPass, String newPassConfirm) {\n        if (newPass.equals(newPassConfirm)) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean verifyCurrentPassword(String currentPassword, Student currentStudent) {\n        if (currentPassword.equals(currentStudent.getPassword())) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean confirmEmail(String newEmail, String newEmailConfirm) {\n        if (newEmail.equals(newEmailConfirm)) {\n            return true;\n        }\n        return false;\n    }\n\n\n\n}
===================================================================
--- app/src/main/java/comp3350/termsetter/Logic/AccountValidation.java	(revision 03b342a464aa674a270108d070684d361c7a52c7)
+++ app/src/main/java/comp3350/termsetter/Logic/AccountValidation.java	(date 1616801150000)
@@ -1,10 +1,11 @@
 package comp3350.termsetter.Logic;
 
+import java.sql.SQLException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import comp3350.termsetter.Persistence.DomainSpecific.Student;
 
-public class AccountValidation{
+public class AccountValidation {
 
     final int MIN_NAME_LENGTH = 1;
     final int MAX_NAME_LENGTH = 20;
@@ -14,33 +15,35 @@
     final int MAX_PHONE_LENGTH = 12;
     Pattern p;
     Matcher m;
+    AccessStudents database = new AccessStudents();
 
-    public AccountValidation(){ }
+
+    public AccountValidation() {
+    }
 
-    public boolean validAccount(String name, String id, String password, String email, String phone){
+    public boolean validAccount(String name, String id, String password, String email, String phone) {
         return validName(name) && validID(id) && validPassword(password) && validEmail(email) && validPhone(phone);
     }
 
-    public boolean validName(String name){
+    public boolean validName(String name) {
         Pattern p = Pattern.compile("^[a-zA-Z]+\\s{1}[a-zA-z]+$");
         Matcher m = p.matcher(name);
         return m.matches() && name.length() >= MIN_NAME_LENGTH && name.length() <= MAX_NAME_LENGTH;
     }
 
-    public boolean validID(String id){
+    public boolean validID(String id) {
         return id.length() >= MIN_NAME_LENGTH && id.length() <= MAX_NAME_LENGTH;
     }
 
-    public boolean validPassword(String password){
+    public boolean validPassword(String password) {
         boolean validLength = password.length() >= MIN_PASS_LENGTH && password.length() <= MAX_PASS_LENGTH;
         boolean hasLetter = false;
         boolean hasNumber = false;
-        for(int i = 0; i < password.length(); i++){
+        for (int i = 0; i < password.length(); i++) {
             char ch = password.charAt(i);
-            if(Character.isLetter(ch)){
+            if (Character.isLetter(ch)) {
                 hasLetter = true;
-            }
-            else if(Character.isDigit(ch)){
+            } else if (Character.isDigit(ch)) {
                 hasNumber = true;
             }
         }
@@ -49,7 +52,7 @@
 //        return password.length() <= 10;
     }
 
-    public boolean validEmail(String email){
+    public boolean validEmail(String email) {
 //        boolean validLength = false;
 //        boolean validDomain = false;
 //        if(email.contains("@")){
@@ -60,39 +63,35 @@
 //        return validLength && validDomain;
         Pattern p = Pattern.compile("^[a-zA-Z]+[0-9]*@myumanitoba\\.ca$");
         Matcher m = p.matcher(email);
-        if(!m.matches() || email.isEmpty() || !(email.contains("@myumanitoba.ca")) || !(email.length() > "@myumanitoba.ca".length())) {
+        if (!m.matches() || email.isEmpty() || !(email.contains("@myumanitoba.ca")) || !(email.length() > "@myumanitoba.ca".length())) {
             return false;
         }
 
         return true;
     }
 
-    public boolean validPhone(String phone){
+    public boolean validPhone(String phone) {
         String digits = "";
         boolean hasInvalidChar = false;
         boolean hasOpenBracket = false;
-        for(int i = 0; i < phone.length(); i++){
+        for (int i = 0; i < phone.length(); i++) {
             char ch = phone.charAt(i);
-            if(Character.isDigit(ch)){
+            if (Character.isDigit(ch)) {
                 digits += ch;
-            }
-            else{
-                if(ch != '+' && ch != ' ' && ch != '-' && ch != '(' && ch != ')'){
+            } else {
+                if (ch != '+' && ch != ' ' && ch != '-' && ch != '(' && ch != ')') {
                     hasInvalidChar = true;
-                }
-                else{
-                    if(ch == '+' && i > 0){
+                } else {
+                    if (ch == '+' && i > 0) {
                         hasInvalidChar = true;
-                    }
-                    else if(ch == '(' && !hasOpenBracket){
+                    } else if (ch == '(' && !hasOpenBracket) {
                         hasOpenBracket = true;
-                    }
-                    else if(ch == ')' && hasOpenBracket){
+                    } else if (ch == ')' && hasOpenBracket) {
                         hasOpenBracket = false;
                     }
                 }
             }
-    }
+        }
         boolean validLength = digits.length() >= MIN_PHONE_LENGTH && digits.length() <= MAX_PHONE_LENGTH;
         return validLength && !hasInvalidChar && !hasOpenBracket;
 //        return phone.length() <= 10;
@@ -119,6 +118,22 @@
         return false;
     }
 
-
+    //we have no record of a user when we login therefore I have added this method -Eriq
+    public boolean verifyStudent(String sID, String password) {
+
+        try {
+            Student student = database.getStudent(sID);
+
+            if(validPassword(password)) {
+                System.out.println(student.getStudentID());
+                if (student != null && student.getStudentID().equals(sID) && student.getPassword().equals(password))
+                    return true;
+            }
+        }
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+        return false;
+    }
 
 }
\ No newline at end of file
