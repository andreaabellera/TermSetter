Index: app/src/main/java/comp3350/termsetter/Persistence/DomainSpecific/hsqldbObjects/StudentAccess.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package comp3350.termsetter.Persistence.DomainSpecific.hsqldbObjects;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport comp3350.termsetter.Logic.AccountValidation;\nimport comp3350.termsetter.Persistence.DomainSpecific.Student;\nimport comp3350.termsetter.Persistence.StudentPersistence;\n\npublic class StudentAccess implements StudentPersistence {\n\n    Connection connect = null;\n    private final String dbPath;\n    private static String currentID = null;\n    private AccountValidation accountValidation = new AccountValidation();\n\n    public StudentAccess(final String dbPath) {\n        this.dbPath = dbPath;\n    }\n\n    private Connection connection() throws SQLException {\n\n        return DriverManager.getConnection(\"jdbc:hsqldb:file:\" + dbPath\n                + \";shutdown=true\", \"SA\", \"\");\n    }\n\n\n    public Student insertStudent(Student student) throws SQLException {\n\n        // first connect\n        try{\n            connect = this.connection();\n            //query\n            PreparedStatement statement = connect.prepareStatement(\"INSERT INTO students VALUES (?,?,?,?,?);\");\n            statement.setString(5, student.getStudentID());\n            statement.setString(1, student.getName());\n            statement.setString(2, student.getPassword());\n            statement.setString(3, student.getEmailAddress());\n            statement.setString(4, student.getPhoneNumber());\n            // ResultSet resultSet = statement.executeQuery();\n\n            //Update DB\n            statement.executeUpdate();\n        }\n        catch (SQLException e){\n\n        }\n\n\n        connect.close();\n        return student;\n    }\n\n    public Student getStudent(String student_id) throws SQLException {\n        // will change this later\n        connect = this.connection();\n        Student student = null;\n\n        //query\n        PreparedStatement statement = connect.prepareStatement(\"select * from students where student_id = ?\");\n        statement.setString(1, student_id);\n        ResultSet resultSet = statement.executeQuery();\n\n        //collect the data from the query\n        while (resultSet.next()) {\n\n            // Enter data into fields and create a new student\n            final String studentID = resultSet.getString(\"student_id\");\n            final String name = resultSet.getString(\"name\");\n            final String passID = resultSet.getString(\"password\");\n            final String phoneNumber = resultSet.getString(\"phoneNum\");\n            final String email = resultSet.getString(\"email\");\n\n            student = new Student( name, passID, email, phoneNumber, studentID);\n\n\n        }\n\n        //whoever uses this method, check if the student is null or not.\n        connect.close();\n        return student;\n    }\n\n    @Override\n    public boolean isEmpty() throws SQLException {\n        List<String> studentIDs = new ArrayList<>();\n        // first connect\n        connect = this.connection();\n\n        //query\n        PreparedStatement statement = connect.prepareStatement(\"select * from students\");\n\n        ResultSet resultSet = statement.executeQuery();\n\n        connect.close();\n        return resultSet.next();\n    }\n\n\n    public List<String> getAllStudents() throws SQLException {\n        List<String> studentIDs = new ArrayList<>();\n        // first connect\n        connect = this.connection();\n\n        //query\n        PreparedStatement statement = connect.prepareStatement(\"select * from students\");\n\n        ResultSet resultSet = statement.executeQuery();\n\n        //collect\n        while (resultSet.next()) {\n\n            //just get the ID's for now\n            final String student_id = resultSet.getString(\"student_id\");\n\n            //put them in a list for now\n            studentIDs.add(student_id);\n        }\n        connect.close();\n        return studentIDs;\n    }\n\n    public void setCurrentStudentID(String sID) {\n        this.currentID = sID;\n    }\n\n    @Override\n    public Student getCurrentStudentID() throws SQLException {\n        return getStudent(currentID);\n    }\n\n    @Override\n    public boolean updatePassword(String password) throws SQLException {\n        if ((currentID != null) && (getStudent(currentID)) != null) {\n            Student student = getStudent(currentID);\n            connect = this.connection();\n\n            PreparedStatement statement = connect.prepareStatement(\"UPDATE students \" +\n                    \"SET password = ? WHERE student_id = ?\");\n            statement.setString(1, password);\n            statement.setString(2, currentID);\n\n            statement.executeUpdate();\n            connect.close();\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public boolean updateEmail(String email) throws SQLException {\n        if ((currentID != null) && (getStudent(currentID)) != null) {\n            Student student = getStudent(currentID);\n            connect = this.connection();\n\n            PreparedStatement statement = connect.prepareStatement(\"UPDATE students \" +\n                    \"SET email = ? WHERE student_id = ?\");\n            statement.setString(1, email);\n            statement.setString(2, currentID);\n\n            statement.executeUpdate();\n            connect.close();\n            return true;\n        }\n\n        return false;\n    }\n\n    /*\n    //checks if student exists (no longer needed)\n    public boolean validStudent(String sID, String password) throws SQLException {\n        boolean check = false;\n        // check if valid user exists\n        if((accountValidation.validID(sID) && accountValidation.validPassword(password)))\n        {\n            //valid account so check DB\n            connect = this.connection();\n\n            PreparedStatement statement = connect.prepareStatement(\"SELECT * FROM students WHERE\" +\n                    \" student_id = ? AND password = ?\");\n            statement.setString(1, sID);\n            statement.setString(2, password);\n\n            ResultSet resultSet = statement.executeQuery();\n\n            connect.close();\n            return resultSet.next(); //false if nothing, true if something!\n        }\n\n        return check; //false\n    }*/\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/comp3350/termsetter/Persistence/DomainSpecific/hsqldbObjects/StudentAccess.java	(revision 03b342a464aa674a270108d070684d361c7a52c7)
+++ app/src/main/java/comp3350/termsetter/Persistence/DomainSpecific/hsqldbObjects/StudentAccess.java	(date 1616800842000)
@@ -17,7 +17,6 @@
     Connection connect = null;
     private final String dbPath;
     private static String currentID = null;
-    private AccountValidation accountValidation = new AccountValidation();
 
     public StudentAccess(final String dbPath) {
         this.dbPath = dbPath;
@@ -57,7 +56,6 @@
     }
 
     public Student getStudent(String student_id) throws SQLException {
-        // will change this later
         connect = this.connection();
         Student student = null;
 
Index: app/src/main/java/comp3350/termsetter/Presentation/LoginPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package comp3350.termsetter.Presentation;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\nimport androidx.appcompat.app.AppCompatActivity;\nimport java.io.IOException;\nimport java.sql.SQLException;\nimport comp3350.termsetter.Logic.AccessStudents;\nimport comp3350.termsetter.Logic.AccountValidation;\nimport comp3350.termsetter.Persistence.DBImporter;\nimport comp3350.termsetter.Persistence.DomainSpecific.StubDatabase;\nimport comp3350.termsetter.Persistence.StudentPersistence;\nimport comp3350.termsetter.R;\n\npublic class LoginPage extends AppCompatActivity {\n    private static Context mContext;\n    private StudentPersistence database;\n    private EditText eID;\n    private EditText ePassword;\n    private Button eLogin;\n    private AccountValidation accountValidation;\n    private AccessStudents accessStudents;\n    String currAccount = null;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_login_page);\n        try {\n            DBImporter.copyDatabaseToDevice(this);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        mContext = getApplicationContext();\n\n        // Comment this database to switch to Real database\n        // Uncomment this database to switch to Stub database\n        //database = new StubDatabase(mContext,\"test.db\");\n\n        // if DB is real\n        if(!(database instanceof StubDatabase)) {\n            accessStudents = new AccessStudents();\n            database = accessStudents.getStudentPersistence();\n            Toast.makeText(LoginPage.this, \"REAL DB\", Toast.LENGTH_SHORT).show();\n\n        }\n        else\n        {\n            accessStudents = new AccessStudents(mContext);\n            database = accessStudents.getStudentPersistence();\n            Toast.makeText(LoginPage.this, \"FakeDB\", Toast.LENGTH_SHORT).show();\n        }\n\n\n    }\n\n    public void onClickLoginButton(View view) throws SQLException {\n        eID = findViewById(R.id.editTextUserID);\n        ePassword = findViewById(R.id.editTextPassword);\n        eLogin = findViewById(R.id.buttonLogin);\n        accountValidation = new AccountValidation();\n\n        String inputID = eID.getText().toString();\n        String inputPassword = ePassword.getText().toString();\n\n        if (accountValidation.validID(inputID)) {\n            if (accountValidation.validPassword(inputPassword) && database.getStudent(inputID) != null) {\n                database.setCurrentStudentID(inputID);\n//                Student currStudent = database.getCurrentStudentID();\n//                editor.clear();\n//                editor.putString(\"currAccount\", currStudent.getStudentID()); // could use inputID but more explicit\n\n                Toast.makeText(LoginPage.this, \"Welcome \" + inputID + \" !\", Toast.LENGTH_SHORT).show();\n                Intent intent = new Intent(LoginPage.this, MainActivity.class);\n                startActivity(intent);\n            }\n            else {\n                Toast.makeText(LoginPage.this, \"Check your password again!\", Toast.LENGTH_SHORT).show();\n            }\n        }\n            else {\n            Toast.makeText(LoginPage.this, \"Check your ID again!\", Toast.LENGTH_SHORT).show();\n            }\n    }\n\n    public void onClickCreateAccountButton(View view) throws SQLException {\n        // Brief message\n        // Shows create account page\n        Toast.makeText(this, \"Create Account Button pressed!\", Toast.LENGTH_LONG).show();\n        Intent intent = new Intent(this, CreateAccount.class);\n        startActivity(intent);\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/comp3350/termsetter/Presentation/LoginPage.java	(revision 03b342a464aa674a270108d070684d361c7a52c7)
+++ app/src/main/java/comp3350/termsetter/Presentation/LoginPage.java	(date 1616800011000)
@@ -70,7 +70,7 @@
         String inputPassword = ePassword.getText().toString();
 
         if (accountValidation.validID(inputID)) {
-            if (accountValidation.validPassword(inputPassword) && database.getStudent(inputID) != null) {
+            if (accountValidation.verifyStudent(inputID, inputPassword)) {
                 database.setCurrentStudentID(inputID);
 //                Student currStudent = database.getCurrentStudentID();
 //                editor.clear();
